#===========================
# 容器相关设置
server:
  port: 9011
debug: false
#log4j2相关配置
logging:
  config: classpath:log4j2-spring.xml
#============================
# spring 组件相关设置
spring:
  application:
    name: spring-cloud-gateway
  jackson:
    date-format: 'yyyy-MM-dd HH:mm:ss'
  mvc:
    throw-exception-if-no-handler-found: true #告诉 SpringBoot 当出现 404 错误时, 直接抛出异常
  resources:
    add-mappings: false #告诉 SpringBoot 不要为我们工程中的资源文件建立映射
  boot:
    admin:
      client:
        url: http://localhost:8011  # 添加spring boot admin监控  Spring Boot Admin Server的URL
        username: admin
        password: admin   #监控中心服务端的用户名和密码
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848    #nacos注册中心地址
    sentinel:
      transport:
        dashboard: localhost:9090  #sentinel 工作台地址
        port: 8719       #默认8719端口 假如被占用会从8719开始依次加1扫描直到找到未被占用端口
      eager: true #取消Sentinel控制台懒加载
      # 配置Sentinel 数据源  进行规则持久化
      datasource:
        ds1:
          nacos:
            server-addr: localhost:8848
            dataId: ${spring.application.name}
            groupId: DEFAULT_GROUP
            data-type: json
            rule-type: flow
    gateway:
      discovery:
        locator:
          enabled: true #开启从注册中心动态创建路由的功能,利用微服务名进行路由
      routes:
        - id: spring-boot-learning  #路由的id,没有固定规则,但是要求唯一,建议项目名  spring-boot-learning项目路由
          uri: lb://spring-boot-learning   #匹配后提供服务的路由地址  uri以lb://开头（lb代表从注册中心获取服务），后面接的就是你需要转发到的服务名称
          predicates:
            - Path=/api/system/**     #断言,路径相匹配的进行路由
          filters:
            - StripPrefix=1 # 表示在转发时去掉第一个前缀
        - id: spring-boot-order  #路由的id,没有固定规则,但是要求唯一,建议项目名     spring-boot-order  项目路由
          uri: lb://spring-boot-order   #匹配后提供服务的路由地址  uri以lb://开头（lb代表从注册中心获取服务），后面接的就是你需要转发到的服务名称
          predicates:
            - Path=/api/order/**     #断言,路径相匹配的进行路由
        - id: spring-boot-pay  #路由的id,没有固定规则,但是要求唯一,建议项目名       spring-boot-pay 项目路由
          uri: lb://spring-boot-pay   #匹配后提供服务的路由地址  uri以lb://开头（lb代表从注册中心获取服务），后面接的就是你需要转发到的服务名称
          predicates:
            - Path=/api/pay/**     #断言,路径相匹配的进行路由
        - id: spring-nacos-config  #路由的id,没有固定规则,但是要求唯一,建议项目名   spring-nacos-config  项目路由
          uri: lb://spring-nacos-config   #匹配后提供服务的路由地址  uri以lb://开头（lb代表从注册中心获取服务），后面接的就是你需要转发到的服务名称
          predicates:
            - Path=/api/config/**     #断言,路径相匹配的进行路由
        - id: spring-nacos-openfeign  #路由的id,没有固定规则,但是要求唯一,建议项目名   spring-nacos-openfeign  项目路由
          uri: lb://spring-nacos-openfeign   #匹配后提供服务的路由地址  uri以lb://开头（lb代表从注册中心获取服务），后面接的就是你需要转发到的服务名称
          predicates:
            - Path=/api/feign/**     #断言,路径相匹配的进行路由
        - id: spring-nacos-sentinel  #路由的id,没有固定规则,但是要求唯一,建议项目名   spring-nacos-sentinel  项目路由
          uri: lb://spring-nacos-sentinel   #匹配后提供服务的路由地址  uri以lb://开头（lb代表从注册中心获取服务），后面接的就是你需要转发到的服务名称
          predicates:
            - Path=/api/sentinel/**     #断言,路径相匹配的进行路由  uri以lb://开头（lb代表从注册中心获取服务），后面接的就是你需要转发到的服务名称
management:
  endpoints:
    web:
      exposure:
        include: "*"  # 放开所有端点
  endpoint:
    health:
      show-details: ALWAYS
#激活sentinel对feign的支持
feign:
  sentinel:
    enabled: true
